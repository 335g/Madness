//  Copyright (c) 2014 Rob Rix. All rights reserved.

/// Convenience for describing the types of parser combinators.
///
/// \param Tree  The type of parse tree generated by the parser.
public struct Parser<Tree> {
	/// The type of parser combinators.
	public typealias Function = String -> (Tree, String)?
}


// MARK: - Terminals

/// Returns a parser which parses `string`.
public func literal(string: String) -> Parser<String>.Function {
	return {
		startsWith($0, string) ?
			(string, $0.fromOffset(countElements(string)))
		:	nil
	}
}


// MARK: - Nonterminals

/// Parses the concatenation of `left` and `right`, pairing their parse trees.
public func ++ <T, U> (left: Parser<T>.Function, right: Parser<U>.Function) -> Parser<(T, U)>.Function {
	return {
		left($0).map { x, rest in
			right(rest).map { y, rest in
				((x, y), rest)
			}
		} ?? nil
	}
}


/// Returns a parser which maps parse trees into another type.
public func map<T, U>(parser: Parser<T>.Function, f: T -> U) -> Parser<U>.Function {
	return {
		parser($0).map { (f($0), $1) }
	}
}



/// MARK: - Operators

/// Concatenation operator.
infix operator ++ {
	/// Associates to the right, linked-list style.
	associativity right

	/// Similar associativity to addition.
	precedence 160
}
