//  Copyright (c) 2014 Rob Rix. All rights reserved.

/// Convenience for describing the types of parser combinators.
///
/// \param Tree  The type of parse tree generated by the parser.
public struct Parser<Tree> {
	/// The type of parser combinators.
	public typealias Function = String -> Result

	/// The type produced by parser combinators.
	public typealias Result = (Tree, String)?
}


/// Parses `string` with `parser`, returning the parse trees or `nil` if nothing could be parsed or if parsing did not consume the entire input.
public func parse<Tree>(parser: Parser<Tree>.Function, string: String) -> Tree? {
	return parser(string).map { $1 == "" ? $0 : nil } ?? nil
}


// MARK: - Terminals

/// Returns a parser which parses any single character.
public func any(input: String) -> (String, String)? {
	return input.isEmpty ? nil : (input.toOffset(1), input.fromOffset(1))
}


/// Returns a parser which parses `string`.
public prefix func % (string: String) -> Parser<String>.Function {
	return {
		startsWith($0, string) ?
			(string, $0.fromOffset(count(string)))
		:	nil
	}
}


/// Returns a parser which parses any character in `interval`.
public prefix func %<I: IntervalType where I.Bound == Character>(interval: I) -> Parser<String>.Function {
	return { string in
		first(string).map { interval.contains($0) ? ("" + [$0], string.fromOffset(1)) : nil } ?? nil
	}
}


// MARK: - Nonterminals

// MARK: Mapping

/// Returns a parser which maps parse trees into another type.
public func --> <T, U>(parser: Parser<T>.Function, f: T -> U) -> Parser<U>.Function {
	return {
		parser($0).map { (f($0), $1) }
	}
}


// MARK: Ignoring input

/// Ignores any parse trees produced by `parser`.
public func ignore<T>(parser: Parser<T>.Function) -> Parser<()>.Function {
	return parser --> const(())
}

/// Ignores any parse trees produced by a parser which parses `string`.
public func ignore(string: String) -> Parser<()>.Function {
	return ignore(%string)
}


// MARK: - Operators

/// Map operator.
infix operator --> {
	/// Associates to the left.
	associativity left

	/// Lower precedence than |.
	precedence 100
}


/// Literal operator.
prefix operator % {}


// MARK: - Imports

import Either
import Prelude
